// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Testare_TravelingApp.Data;

#nullable disable

namespace Testare_TravelingApp.Migrations
{
    [DbContext(typeof(Testare_TravelingAppContext))]
    [Migration("20241212155549_Update_Restaurants")]
    partial class Update_Restaurants
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Testare_TravelingApp.Models.Activity", b =>
                {
                    b.Property<int>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActivityId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ActivityId");

                    b.ToTable("Activity");
                });

            modelBuilder.Entity("Testare_TravelingApp.Models.Agenda", b =>
                {
                    b.Property<int>("AgendaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AgendaId"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AgendaId");

                    b.HasIndex("UserId");

                    b.ToTable("Agenda");
                });

            modelBuilder.Entity("Testare_TravelingApp.Models.AgendaActivity", b =>
                {
                    b.Property<int>("AgendaActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AgendaActivityId"));

                    b.Property<int?>("ActivityId")
                        .HasColumnType("int");

                    b.Property<int>("AgendaId")
                        .HasColumnType("int");

                    b.Property<int?>("NatureTrailId")
                        .HasColumnType("int");

                    b.Property<int?>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<int?>("TouristAttractionId")
                        .HasColumnType("int");

                    b.HasKey("AgendaActivityId");

                    b.HasIndex("ActivityId");

                    b.HasIndex("AgendaId");

                    b.HasIndex("NatureTrailId");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("TouristAttractionId");

                    b.ToTable("AgendaActivity");
                });

            modelBuilder.Entity("Testare_TravelingApp.Models.NatureTrail", b =>
                {
                    b.Property<int>("NatureTrailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NatureTrailId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("LengthInKm")
                        .HasColumnType("float");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("NatureTrailId");

                    b.ToTable("NatureTrail");
                });

            modelBuilder.Entity("Testare_TravelingApp.Models.Restaurant", b =>
                {
                    b.Property<int>("RestaurantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RestaurantId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cuisine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RestaurantId");

                    b.ToTable("Restaurant");
                });

            modelBuilder.Entity("Testare_TravelingApp.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<int?>("ActivityId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("datetime2");

                    b.Property<int?>("NatureTrailId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int?>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<int?>("TouristAttractionId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.HasIndex("ActivityId");

                    b.HasIndex("NatureTrailId");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("TouristAttractionId");

                    b.HasIndex("UserId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("Testare_TravelingApp.Models.TouristAttraction", b =>
                {
                    b.Property<int>("TouristAttractionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TouristAttractionId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("OpeningHours")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TouristAttractionId");

                    b.ToTable("TouristAttraction");
                });

            modelBuilder.Entity("Testare_TravelingApp.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Testare_TravelingApp.Models.Agenda", b =>
                {
                    b.HasOne("Testare_TravelingApp.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Testare_TravelingApp.Models.AgendaActivity", b =>
                {
                    b.HasOne("Testare_TravelingApp.Models.Activity", "Activity")
                        .WithMany("AgendaActivities")
                        .HasForeignKey("ActivityId");

                    b.HasOne("Testare_TravelingApp.Models.Agenda", "Agenda")
                        .WithMany("AgendaActivities")
                        .HasForeignKey("AgendaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Testare_TravelingApp.Models.NatureTrail", "NatureTrail")
                        .WithMany("AgendaActivities")
                        .HasForeignKey("NatureTrailId");

                    b.HasOne("Testare_TravelingApp.Models.Restaurant", "Restaurant")
                        .WithMany("AgendaActivities")
                        .HasForeignKey("RestaurantId");

                    b.HasOne("Testare_TravelingApp.Models.TouristAttraction", "TouristAttraction")
                        .WithMany("AgendaActivities")
                        .HasForeignKey("TouristAttractionId");

                    b.Navigation("Activity");

                    b.Navigation("Agenda");

                    b.Navigation("NatureTrail");

                    b.Navigation("Restaurant");

                    b.Navigation("TouristAttraction");
                });

            modelBuilder.Entity("Testare_TravelingApp.Models.Review", b =>
                {
                    b.HasOne("Testare_TravelingApp.Models.Activity", "Activity")
                        .WithMany("Reviews")
                        .HasForeignKey("ActivityId");

                    b.HasOne("Testare_TravelingApp.Models.NatureTrail", "NatureTrail")
                        .WithMany("Reviews")
                        .HasForeignKey("NatureTrailId");

                    b.HasOne("Testare_TravelingApp.Models.Restaurant", "Restaurant")
                        .WithMany("Reviews")
                        .HasForeignKey("RestaurantId");

                    b.HasOne("Testare_TravelingApp.Models.TouristAttraction", "TouristAttraction")
                        .WithMany("Reviews")
                        .HasForeignKey("TouristAttractionId");

                    b.HasOne("Testare_TravelingApp.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("NatureTrail");

                    b.Navigation("Restaurant");

                    b.Navigation("TouristAttraction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Testare_TravelingApp.Models.Activity", b =>
                {
                    b.Navigation("AgendaActivities");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Testare_TravelingApp.Models.Agenda", b =>
                {
                    b.Navigation("AgendaActivities");
                });

            modelBuilder.Entity("Testare_TravelingApp.Models.NatureTrail", b =>
                {
                    b.Navigation("AgendaActivities");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Testare_TravelingApp.Models.Restaurant", b =>
                {
                    b.Navigation("AgendaActivities");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Testare_TravelingApp.Models.TouristAttraction", b =>
                {
                    b.Navigation("AgendaActivities");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
